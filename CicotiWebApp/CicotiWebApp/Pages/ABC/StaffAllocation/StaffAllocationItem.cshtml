@page  "{ID?}"

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken;
    }
}
@model CicotiWebApp.Pages.ABC.StaffAllocation.StaffAllocationItemModel

@{
    ViewData["Title"] = "Create";
    Layout = "~/Pages/_LayoutDataTables.cshtml";
}

<h4>Add Edit Staff Allocation</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        @*<input type="hidden" asp-for="AccAmtPrinciple.ActCostEmployeeAmtPrincipleID" id="actCostEmployeeAmtPrincipleID" />*@
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group">
            <label asp-for="ActCostSiloAllocation.ActCostSiloAllocationID" class="control-label"></label>
            <input asp-for="ActCostSiloAllocation.ActCostSiloAllocationID" class="form-control" id="actCostSiloAllocationID" />
            <span asp-validation-for="ActCostSiloAllocation.ActCostSiloAllocationID" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="ActCostSiloAllocation.Silo.SiloName" class="control-label"></label>
            <select asp-for="ActCostSiloAllocation.SiloID" id="siloID"
                    asp-items="Model.SubSiloSL" class="form-control">
                Invoice Status
                <option value="">--Select Silo--</option>
            </select>
            <span asp-validation-for="ActCostSiloAllocation.SiloID" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="ActCostSiloAllocation.ActCostPeriod.Period" class="control-label"></label>
            <select asp-for="ActCostSiloAllocation.ActCostPeriodID" id="actCostPeriodID"
                    asp-items="Model.SubPeriodSL" class="form-control">
                <option value="">--Select Period--</option>
            </select>
            <span asp-validation-for="ActCostSiloAllocation.ActCostPeriodID" class="text-danger"></span>
        </div>
        <div id="EmployeeSection">
            <div class="input-group" id="divEmployeeBtns">
                <span class="input-group-btn">
                    <input type="button" value="Find Employee." class="btn btn-default" id="findEmployeeBtn" />
                </span>
            </div>
            <br />
            <div id="divEmployeeTable" style="width:90%; margin:0 auto;">
                <table id="EmployeeTable" class="table table-striped table-bordered dt-responsive nowrap" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>EmployeeID</th>
                            <th>Employee Number</th>
                            <th>Name</th>
                            <th>Job Description</th>
                            <th>Department</th>
                            <th>Branch</th>
                            <th>Cost Centre</th>
                            <th>Select</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="ActCostSiloAllocation.Employee.EmployeeID" class="control-label"></label>
            <input asp-for="ActCostSiloAllocation.Employee.EmployeeID" class="form-control" id="employeeID" />
            <span asp-validation-for="ActCostSiloAllocation.Employee.EmployeeID" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="ActCostSiloAllocation.Employee.FirstName" class="control-label"></label>
            <input asp-for="ActCostSiloAllocation.Employee.FirstName" class="form-control" id="firstName" />
            <span asp-validation-for="ActCostSiloAllocation.Employee.FirstName" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="ActCostSiloAllocation.Employee.LastName" class="control-label"></label>
            <input asp-for="ActCostSiloAllocation.Employee.LastName" class="form-control" id="surname" />
            <span asp-validation-for="ActCostSiloAllocation.Employee.LastName" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="ActCostSiloAllocation.AllocPercentage" class="control-label"></label>
            <input asp-for="ActCostSiloAllocation.AllocPercentage" class="form-control" id="allocPercentage" />
            <span asp-validation-for="ActCostSiloAllocation.AllocPercentage" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="ActCostSiloAllocation.Description" class="control-label"></label>
            <input asp-for="ActCostSiloAllocation.Description" class="form-control" id="description" />
            <span asp-validation-for="ActCostSiloAllocation.Description" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="ActCostSiloAllocation.Comments" class="control-label"></label>
            <input asp-for="ActCostSiloAllocation.Comments" class="form-control" id="comments" />
            <span asp-validation-for="ActCostSiloAllocation.Comments" class="text-danger"></span>
        </div>
        <div class="form-group">
            <input type="submit" value="Save" class="btn btn-default" id="savebtn" />
        </div>
    </div>
</div>
<div>
    <a asp-page="OtherIncome">Back to List</a>
</div>

@section Scripts {
    @await Html.PartialAsync("_ModalPartial")
    @await Html.PartialAsync("_ModalConfirmPartial")
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">
        var StaffAllocToSave = {};
              function updateEmployeeInputFields(data) {
            var selectedEmployee = {};
            selectedEmployee = JSON.parse(data);
            console.log(selectedEmployee.employeeID);
            $("#employeeID").val(selectedEmployee.EmployeeID);
            $("#firstName").val(decodeURIComponent(selectedEmployee.name));
            $("#surname").val(decodeURIComponent(selectedEmployee.name));
            $("#divEmployeeTable").hide();
        }

        function GetEmployeeData() {
             $("#EmployeeTable").on('xhr.dt', function (e, settings, json, xhr) {
            }).DataTable({
                lengthMenu: [25, 100, 150, 200],
                dom: '<lfB<t>ip>',
                buttons: ['excel', 'copy', 'csv', 'pdf', 'print'],
                "fixedHeader": {
                    "header": true,
                    "footer": true
                },
                "responsive": true,
                "processing": true, // for show progress bar
                "serverSide": true, // for process server side
                "filter": true, // this is for disable filter (search box)
                "orderMulti": false, // for disable multiple column at once
                "ajax": {

                    "url": "/Employee/Index?handler=Paging",
                     "headers":
                        {
                            "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                        },
                    "type": "POST",
                    /*"contentType": "application/x-www-form-urlencoded",*/
                    "datatype": "json"
                },
                "columnDefs":
                [   {
                        /*Employee ID is not visible and is not searchable*/
                        "targets": [0],
                        "visible": false,
                        "searchable": true
                    },
                    {
                        /*Reports To Employee No is visible and is searchable*/
                        "targets": [1],
                        "visible": false,
                        "searchable": true
                    },
                    {
                        /*Name is visible and is not searchable*/
                        "targets": [2],
                        "visible": true,
                        "searchable": true,
                        "orderable": true
                    },
                    {
                        /*Job Description is visible and is not searchable*/
                        "targets": [3],
                        "visible": true,
                        "searchable": true,
                        "orderable": true
                    },
                    {
                        /*Department is visible and is not searchable*/
                        "targets": [4],
                        "visible": true,
                        "searchable": true,
                        "orderable": true
                    },
                    {
                        /*Branch  is visible and is not searchable*/
                        "targets": [5],
                        "visible": true,
                        "searchable": true,
                        "orderable": true
                    },
                    {
                        /*Cost Centre is visible and is not searchable*/
                        "targets": [6],
                        "visible": true,
                        "searchable": true,
                        "orderable": true
                    },
                    {
                        /*Select button  is  visible and is not searchable*/
                        "targets": [7],
                        "visible": true,
                        "searchable": false,
                        "orderable": false
                    }
                ],
                "columns": [
                    { "data": "employeeID", "name": "employeeID", "autoWidth": true },
                    { "data": "employeeNo", "name": "employeeNo", "autoWidth": true },
                    { "data": "name", "name": "make", "autoWidth": true },
                    { "data": "jobDescription", "name": "jobDescription", "autoWidth": true },
                    { "data": "department", "name": "department", "autoWidth": true },
                    { "data": "branch", "name": "branch", "autoWidth": true },
                    { "data": "costCentre", "name": "costCentre", "autoWidth": true },
                    {
                        "render": function (data, type, full, meta) {
                            var selectedEmployee = {};
                            selectedEmployee.EmployeeID = full.employeeID;
                            selectedEmployee.name = encodeURIComponent(full.name);
                            return "<p data-placement='top' data-toggle='tooltip' title='Select'><button id='btnModel' class='btn btn-primary btn-xs' data-title='Select' data-toggle='modal' data-target='#edit' onclick=updateEmployeeInputFields('" + JSON.stringify(selectedEmployee) + "')><span class='glyphicon glyphicon-pencil'></span></button></p>";
                        }
                    }
                ]
            });//Employee Table
        }

        function ajaxStaffAllocationUpdate(obj) {
            console.log("ajaxStaffAllocationUpdate Function runs: " + JSON.stringify(obj));
            $.ajax({
                type: "PUT",
                url: "/ABC/StaffAllocation/StaffAllocationItem?handler=UpdateStaffAlloc",
                headers:
                {
                    "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                },
                contentType: "application/json",
                dataType: "json",
                data: JSON.stringify(obj),
                success: function (data) {
                    console.log(data);
                    console.log("StaffAlloc successfully returned from DataBase");
                    $("#modalHeader").text("Staff Allocation Processing Status");
                    $("#modalMessage").text($("#actCostSiloAllocationID").val() + " was updated.");
                    $("#myModal").modal("show");
                    },
                    error: function (jqXHR, textStatus, errorThrown) {

                        $("#modalHeader").text("Staff Allocation Processing Status");
                        $("#modalMessage").text("Staff Allocation was not updated.");
                        $("#myModal").modal("show");
                    }
                });//ajax Update Section 1
        }

        function ajaxStaffAllocationInsert(obj) {
            console.log("Staff Allocation: in Insert Ajax Call: " + JSON.stringify(obj));
            $.ajax({
                type: "POST",
                url: "/ABC/StaffAllocation/StaffAllocationItem?handler=InsertStaffAlloc",
                    headers:
                        {
                            "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                        },
                    contentType: "application/json",
                    dataType: "json",
                    data: JSON.stringify(obj),
                    success: function (data) {
                        $("#modalHeader").text("Staff Allocation Processing Status");
                        $("#modalMessage").text(data.actCostAccountAmtPrincipleID + " was inserted.");
                        $("#myModal").modal("show");
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        $("#modalHeader").text("Staff Allocation Processing Status Processing Status");
                        $("#modalMessage").text("Staff Allocation Processing Data Not Updated.");
                        $("#myModal").modal("show");
                    }
                });//ajax insert
        }

        $(document).ready(function () {
            $('#savebtn').click(function () {
                StaffAllocToSave.actCostSiloAllocationID = $('#actCostSiloAllocationID').val();
                StaffAllocToSave.siloID = $('#siloID').val();
                StaffAllocToSave.actCostPeriodID = $('#actCostPeriodID').val();
                StaffAllocToSave.employeeID = $('#employeeID').val();
                StaffAllocToSave.allocPercentage = $('#allocPercentage').val();
                StaffAllocToSave.description = $('#description').val();
                StaffAllocToSave.comments = $('#comments').val();

                if ($('#actCostSiloAllocationID').val().length > 0 && $('#actCostSiloAllocationID').val() > 0) {
                    ajaxOtherIncomeUpdate(StaffAllocToSave);
                }
                else {
                    StaffAllocToSave.actCostSiloAllocationID = 0
                    ajaxOtherIncomeInsert(StaffAllocToSave);
                }
            });

            //hide the Reports To table and the Reports To capture fields when the form starts up
            $("#divEmployeeTable").hide();
          
            //Find Model
            $('#findEmployeeBtn').click(function () {
                $("#divEmployeeTable").show();
                //$('#divEmployeeInputFieldsSection').hide();
                if (!$.fn.DataTable.isDataTable('#EmployeeTable')) {
                    GetEmployeeData();
                }
            });

   });//Document Ready end.

    </script>

}
