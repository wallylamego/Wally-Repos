<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="ajax" order="7">

<css lib="datatables buttons select editor"/>
<js lib="jquery datatables buttons select editor">
<![CDATA[

var editor; // use a global for the submit and return data rendering in the examples

$(document).ready(function() {
	editor = new $.fn.dataTable.Editor( {
		ajax: "../php/join.php",
		table: "#example",
		fields: [ {
				label: "First name:",
				name: "users.first_name"
			}, {
				label: "Last name:",
				name: "users.last_name"
			}, {
				label: "Phone #:",
				name: "users.phone"
			}, {
				label: "Site:",
				name: "users.site",
				type: "select"
			}
		]
	} );

	// Activate an inline edit on click of a table cell
	$('#example').on( 'click', 'tbody td:not(:first-child)', function (e) {
		editor.inline( this, {
			onBlur: 'submit'
		} );
	} );

	$('#example').DataTable( {
		dom: "Bfrtip",
		ajax: {
			url: "../php/join.php",
			type: 'POST'
		},
		columns: [
			{
				data: null,
				defaultContent: '',
				className: 'select-checkbox',
				orderable: false
			},
			{ data: "users.first_name" },
			{ data: "users.last_name" },
			{ data: "users.phone" },
			{ data: "sites.name", editField: "users.site" }
		],
		order: [ 1, 'asc' ],
		select: {
			style:    'os',
			selector: 'td:first-child'
		},
		buttons: [
			{ extend: "create", editor: editor },
			{ extend: "edit",   editor: editor },
			{ extend: "remove", editor: editor }
		]
	} );
} );

]]>
</js>

<title lib="Editor">Joined tables</title>

<info><![CDATA[

The data shown in a DataTable does not always need a 1:1 match to the fields shown in the Editor form (as shown by the [table only](../advanced/tableOnlyData.html) and [form only](../advanced/formOnlyData.html) example), something which is frequently used in joined table - e.g. the table shows the information from the joined table, while the Editor modifies the reference for the record that is being joined to. In this example the _Location_ comes from the `sites.name` parameter, while Editor will modify `users.site`.

When using inline editing Editor will attempt to automatically determine the field to be edited based on the DataTables configuration, but this will only work if `dt-init columns.data` matches the `e-init fields.name`. In the _Location_ case here it does not. This would result is a ` Unable to automatically determine field from source` error being emitted by Editor if it wasn't resolved.

It is possible to use `e-api inline()` to specify the field to be edited, but that requires an additional event handler to be used for the special column.

To resolve this, Editor supports an additional property on the DataTables columns called `editField` which tells Editor which field to edit when inline or bubble editing this field. In this example `editField: "users.site"` is used for the _Location_ column.

]]></info>

<custom-table>
	<table id="example" class="display" cellspacing="0" width="100%">
		<thead>
			<tr>
				<th></th>
				<th>First name</th>
				<th>Last name</th>
				<th>Phone #</th>
				<th>Location</th>
			</tr>
		</thead>

		<tfoot>
			<tr>
				<th></th>
				<th>First name</th>
				<th>Last name</th>
				<th>Phone #</th>
				<th>Location</th>
			</tr>
		</tfoot>
	</table>
</custom-table>

</dt-example>

