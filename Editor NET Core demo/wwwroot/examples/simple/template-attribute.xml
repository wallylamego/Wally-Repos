<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="ajax" order="10">

<css lib="datatables buttons select editor">
<![CDATA[
#customForm {
	display: flex;
	flex-flow: row wrap;
}

#customForm fieldset {
	flex: 1;
	border: 1px solid #aaa;
	margin: 0.5em;
}

#customForm fieldset legend {
	padding: 5px 20px;
	border: 1px solid #aaa;
	font-weight: bold;
}

#customForm fieldset.name {
	flex: 2 100%;
}

#customForm fieldset.name legend {
	background: #bfffbf;
}

#customForm fieldset.office legend {
	background: #ffffbf;
}

#customForm fieldset.hr legend {
	background: #ffbfbf;
}

#customForm div.DTE_Field {
	padding: 5px;
}
]]>
</css>
<js lib="jquery datatables buttons select editor">
<![CDATA[

var editor; // use a global for the submit and return data rendering in the examples

$(document).ready(function() {
	editor = new $.fn.dataTable.Editor( {
		ajax: "../php/staff.php",
		table: "#example",
		template: '#customForm',
		fields: [ {
				label: "First name:",
				name: "first_name"
			}, {
				label: "Last name:",
				name: "last_name"
			}, {
				label: "Position:",
				name: "position"
			}, {
				label: "Office:",
				name: "office"
			}, {
				label: "Extension:",
				name: "extn"
			}, {
				label: "Start date:",
				name: "start_date",
				type: "datetime"
			}, {
				label: "Salary:",
				name: "salary"
			}
		]
	} );

	$('#example').DataTable( {
		dom: "Bfrtip",
		ajax: "../php/staff.php",
		columns: [
			{ data: null, render: function ( data, type, row ) {
				// Combine the first and last names into a single table field
				return data.first_name+' '+data.last_name;
			} },
			{ data: "position" },
			{ data: "office" },
			{ data: "extn" },
			{ data: "start_date" },
			{ data: "salary", render: $.fn.dataTable.render.number( ',', '.', 0, '$' ) }
		],
		select: true,
		buttons: [
			{ extend: "create", editor: editor },
			{ extend: "edit",   editor: editor },
			{ extend: "remove", editor: editor }
		]
	} );
} );

]]>
</js>

<title lib="Editor">Custom form layout / templates (attributes)</title>

<info><![CDATA[

This example is functionally identical to the [custom tag template example](template.html). The difference is the HTML used to describe the template does not use HTML5 custom tags; instead it makes use of a `data-editor-template` attribute on standard elements (e.g. a `-tag div`).

Editor will insert a field which matches the name of the `data-editor-template` attribute of an element _into_ (append) that element.

]]></info>

<demo-html>
	<div id="customForm">
		<fieldset class="name">
			<legend>Name</legend>

			<div data-editor-template="first_name"/>
			<div data-editor-template="last_name"/>
		</fieldset>
		<fieldset class="office">
			<legend>Office</legend>

			<div data-editor-template="office"/>
			<div data-editor-template="extn"/>
		</fieldset>
		<fieldset class="hr">
			<legend>HR info</legend>

			<div data-editor-template="position"/>
			<div data-editor-template="salary"/>
			<div data-editor-template="start_date"/>
		</fieldset>
	</div>
</demo-html>

</dt-example>

