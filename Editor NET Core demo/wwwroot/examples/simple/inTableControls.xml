<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="ajax" order="8">

<css lib="datatables editor" />
<js lib="jquery datatables editor">
<![CDATA[

var editor; // use a global for the submit and return data rendering in the examples

$(document).ready(function() {
	editor = new $.fn.dataTable.Editor( {
		"ajax": "../php/staff.php",
		"table": "#example",
		"fields": [ {
				"label": "First name:",
				"name": "first_name"
			}, {
				"label": "Last name:",
				"name": "last_name"
			}, {
				"label": "Position:",
				"name": "position"
			}, {
				"label": "Office:",
				"name": "office"
			}, {
				"label": "Extension:",
				"name": "extn"
			}, {
				"label": "Start date:",
				"name": "start_date",
				"type": "datetime"
			}, {
				"label": "Salary:",
				"name": "salary"
			}
		]
	} );

	// New record
	$('a.editor_create').on('click', function (e) {
		e.preventDefault();

		editor.create( {
			title: 'Create new record',
			buttons: 'Add'
		} );
	} );

	// Edit record
	$('#example').on('click', 'a.editor_edit', function (e) {
		e.preventDefault();

		editor.edit( $(this).closest('tr'), {
			title: 'Edit record',
			buttons: 'Update'
		} );
	} );

	// Delete a record
	$('#example').on('click', 'a.editor_remove', function (e) {
		e.preventDefault();

		editor.remove( $(this).closest('tr'), {
			title: 'Delete record',
			message: 'Are you sure you wish to remove this record?',
			buttons: 'Delete'
		} );
	} );

	$('#example').DataTable( {
		ajax: "../php/staff.php",
		columns: [
			{ data: null, render: function ( data, type, row ) {
				// Combine the first and last names into a single table field
				return data.first_name+' '+data.last_name;
			} },
			{ data: "position" },
			{ data: "office" },
			{ data: "extn" },
			{ data: "start_date" },
			{ data: "salary", render: $.fn.dataTable.render.number( ',', '.', 0, '$' ) },
			{
				data: null, 
				className: "center",
				defaultContent: '<a href="" class="editor_edit">Edit</a> / <a href="" class="editor_remove">Delete</a>'
			}
		]
	} );
} );

]]>
</js>

<title lib="Editor">In table form controls</title>

<info><![CDATA[

Many of the Editor examples use [Buttons](http://datatables.net/extensions/buttons) to provide buttons and row selection interaction options. While it is sometimes convenient to use Buttons in this manner, it might not always be the interface method that you wish to present to your end users. Editor does not require Buttons in order to function, as shown in this example where edit and delete links are shown in the table and the 'new' option is a link at the top of the table.

This example shows the use of the `e-api create()`, `e-api edit()` and `e-api remove()` API methods, which are activated when required by standard jQuery events. With this API, Editor is very powerful as it can be accessed and controlled in any way you wish.

Two other points worth noting about the example is the use of `dt-init columns.defaultContent` for the admin column (in combination with a `null` value for `dt-init columns.data`) to display the edit and delete links.

]]></info>

<demo-html>
	<a class="editor_create">Create new record</a>
</demo-html>

<custom-table>
	<table id="example" class="display" cellspacing="0" width="100%">
		<thead>
			<tr>
				<th>Name</th>
				<th>Position</th>
				<th>Office</th>
				<th>Extn.</th>
				<th>Start date</th>
				<th>Salary</th>
				<th>Edit / Delete</th>
			</tr>
		</thead>

		<tfoot>
			<tr>
				<th>Name</th>
				<th>Position</th>
				<th>Office</th>
				<th>Extn.</th>
				<th>Start date</th>
				<th>Salary</th>
				<th>Edit / Delete</th>
			</tr>
		</tfoot>
	</table>
</custom-table>

</dt-example>

