<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="ajax" order="3">

<css lib="datatables buttons select editor">
	a.marginLeft {
		margin-left: 1em;
	}
</css>
<js lib="jquery datatables buttons select editor">
<![CDATA[

var editor; // use a global for the submit and return data rendering in the examples

$(document).ready(function() {
	editor = new $.fn.dataTable.Editor( {
		ajax: "../php/staff.php",
		table: "#example",
		fields: [ {
				label: "First name:",
				name: "first_name"
			}, {
				label: "Last name:",
				name: "last_name"
			}, {
				label: "Position:",
				name: "position"
			}, {
				label: "Office:",
				name: "office"
			}, {
				label: "Extension:",
				name: "extn"
			}, {
				label: "Start date:",
				name: "start_date"
			}, {
				label: "Salary:",
				name: "salary"
			}
		]
	} );

	var table = $('#example').DataTable( {
		dom: "Bfrtip",
		ajax: "../php/staff.php",
		columns: [
			{ data: null, render: function ( data, type, row ) {
				// Combine the first and last names into a single table field
				return data.first_name+' '+data.last_name;
			} },
			{ data: "position" },
			{ data: "office" },
			{ data: "extn" },
			{ data: "start_date" },
			{ data: "salary", render: $.fn.dataTable.render.number( ',', '.', 0, '$' ) }
		],
		select: true,
		buttons: [
			{ extend: "create", editor: editor },
			{ extend: "edit",   editor: editor },
			{
				extend: "selectedSingle",
				text: "Salary +250",
				action: function ( e, dt, node, config ) {
					// Immediately add `250` to the value of the salary and submit
					editor
						.edit( table.row( { selected: true } ).index(), false )
						.set( 'salary', (editor.get( 'salary' )*1) + 250 )
						.submit();
				}
			},
			{ extend: "remove", editor: editor }
		]
	} );
} );

]]>
</js>

<title lib="Editor">Customised control buttons</title>

<info><![CDATA[

Very often, when editing a form, the system user is required to perform a repetitious task that you wish to optimise the action of. For example, this might be activating a user account in a list of users, where you simply click an _Activate_ button.

In this example, we make use of [Buttons's](//datatables.net/extensions/buttons) ability to easily create customised button actions to show a button that will use the Editor form (without displaying it to the end user) to add 250 to the salary value for the selected row. This is done by specifying a custom button action function using `b-init buttons.buttons.action` - that function will edit the currently selected row, alter the salary value and submit it to the server.

It is worth noting that Buttons is used in this example for simplicity, but you could use any control on your page that you wish!

]]></info>

</dt-example>

