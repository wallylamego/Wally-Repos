<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="ajax" order="7">

<css lib="datatables buttons select editor" />
<js lib="jquery datatables buttons select editor">
<![CDATA[

var editor; // use a global for the submit and return data rendering in the examples

$(document).ready(function() {
	editor = new $.fn.dataTable.Editor( {
		"ajax": "../php/jsonId.php",
		"table": "#example",
		"idSrc": "id",
		"fields": [ {
				"label": "First name:",
				"name": "first_name"
			}, {
				"label": "Last name:",
				"name": "last_name"
			}, {
				"label": "Position:",
				"name": "position"
			}, {
				"label": "Office:",
				"name": "office"
			}, {
				"label": "Extension:",
				"name": "extn"
			}, {
				"label": "Start date:",
				"name": "start_date",
				"type": "datetime"
			}, {
				"label": "Salary:",
				"name": "salary"
			}
		]
	} );

	$('#example').DataTable( {
		dom: "Bfrtip",
		ajax: "../php/jsonId.php",
		columns: [
			{ data: null, render: function ( data, type, row ) {
				// Combine the first and last names into a single table field
				return data.first_name+' '+data.last_name;
			} },
			{ data: "position" },
			{ data: "office" },
			{ data: "extn" },
			{ data: "start_date" },
			{ data: "salary", render: $.fn.dataTable.render.number( ',', '.', 0, '$' ) }
		],
		select: true,
		buttons: [
			{ extend: "create", editor: editor },
			{ extend: "edit",   editor: editor },
			{ extend: "remove", editor: editor }
		]
	} );
} );

]]>
</js>

<title lib="Editor">Row ID source specification</title>

<info><![CDATA[

By default Editor will use the `tr` element's `id` attribute to identify the row to the server (more specifically this will typically contain the database's primary key to uniquely identity the row). While this default method can be very useful, particularly if you use the `DT_RowId` JSON option to set the id, you may wish to read the row's id from the JSON data source, rather than the DOM. This is easily done using the `e-init idSrc` option.

The example below, with `e-init idSrc` is set to `id` is suitable for cases where the data source objects look like: `{ "id": 2, "first_name": "Fiona", ...}`. Like other data source options the `e-init idSrc` option can be given in dotted object notation to read nested objects.

]]></info>

</dt-example>

